version: '3.8'

services:
  postgres:
    build:
      context: ./src/postgres
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 30s
      retries: 3
  mongodb:
    build:
      context: ./src/mongoDB
      dockerfile: Dockerfile
    environment:
      MONGO_USERNAME: ken
      MONGO_PASSWORD: cosh
      MONGO_ROOT_USERNAME: ken
      MONGO_ROOT_PASSWORD: cosh
      MONGO_INITDB_ROOT_USERNAME: ken
      MONGO_INITDB_ROOT_PASSWORD: cosh
      MONGO_USERS_LIST: "ken:readWrite:cosh"
    healthcheck:
      test:
        [
          "CMD",
          "mongo",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
  rabbitmq:
    build:
      context: ./src/rabbitmq
      dockerfile: Dockerfile
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    ports:
      - 15672:15672
      - 5672:5672
  auth:
    build:
      context: ./src/auth-service
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
  converter:
    build:
      context: ./src/converter-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
  notification:
    build:
      context: ./src/notification-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
  gateway:
    build:
      context: ./src/gateway-service
      dockerfile: Dockerfile
    ports:
      - 80:8080
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy

networks:
  auth-network:
    driver: bridge
  converter-network:
    driver: bridge
  gateway-network:
    driver: bridge
  notification-network:
    driver: bridge